.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Geo::IP 3"
.TH Geo::IP 3 "2009-03-06" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Geo::IP \- Look up location and network information by IP Address
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Geo::IP;
\&
\&  my $gi = Geo::IP\->new(GEOIP_STANDARD);
\&
\&  # look up IP address \*(Aq24.24.24.24\*(Aq
\&  # returns undef if country is unallocated, or not defined in our database
\&  my $country = $gi\->country_code_by_addr(\*(Aq24.24.24.24\*(Aq);
\&  $country = $gi\->country_code_by_name(\*(Aqyahoo.com\*(Aq);
\&  # $country is equal to "US"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module uses a file based database.  This database simply contains
\&\s-1IP\s0 blocks as keys, and countries as values. 
This database should be more
complete and accurate than reverse \s-1DNS\s0 lookups.
.PP
This module can be used to automatically select the geographically closest mirror,
to analyze your web server logs
to determine the countries of your visitors, for credit card fraud
detection, and for software export controls.
.SH "IP ADDRESS TO COUNTRY DATABASES"
.IX Header "IP ADDRESS TO COUNTRY DATABASES"
Free monthly updates to the database are available from
.PP
.Vb 1
\&  http://www.maxmind.com/download/geoip/database/
.Ve
.PP
This free database is similar to the database contained in IP::Country, as 
well as many paid databases. It uses \s-1ARIN\s0, \s-1RIPE\s0, \s-1APNIC\s0, and \s-1LACNIC\s0 whois to 
obtain the \s-1IP\-\s0>Country mappings.
.PP
If you require greater accuracy, MaxMind offers a database on a paid 
subscription basis.  Also included with this is a service that updates your
database automatically each month, by running a program called geoipupdate
included with the C \s-1API\s0 from a cronjob.  For more details on the differences
between the free and paid databases, see:
http://www.maxmind.com/app/geoip_country
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.ie n .IP "$gi = Geo::IP\->new( $flags );" 4
.el .IP "\f(CW$gi\fR = Geo::IP\->new( \f(CW$flags\fR );" 4
.IX Item "$gi = Geo::IP->new( $flags );"
Constructs a new Geo::IP object with the default database located inside your system's
\&\fIdatadir\fR, typically \fI/usr/local/share/GeoIP/GeoIP.dat\fR.
.Sp
Flags can be set to either \s-1GEOIP_STANDARD\s0, or for faster performance
(at a cost of using more memory), \s-1GEOIP_MEMORY_CACHE\s0.  When using memory
cache you can force a reload if the file is updated by setting \s-1GEOIP_CHECK_CACHE\s0.
\&\s-1GEOIP_INDEX_CACHE\s0 caches
the most frequently accessed index portion of the database, resulting
in faster lookups than \s-1GEOIP_STANDARD\s0, but less memory usage than
\&\s-1GEOIP_MEMORY_CACHE\s0 \- useful for larger databases such as
GeoIP Organization and GeoIP City.  Note, for GeoIP Country, Region
and Netspeed databases, \s-1GEOIP_INDEX_CACHE\s0 is equivalent to \s-1GEOIP_MEMORY_CACHE\s0
.Sp
To combine flags, use the bitwise \s-1OR\s0 operator, |.  For example, to cache the database
in memory, but check for an updated GeoIP.dat file, use:
Geo::IP\->new( \s-1GEOIP_MEMORY_CACHE\s0 | \s-1GEOIP_CHECK_CACHE\s0. );
.ie n .IP "$gi = Geo::IP\->open( $database_filename, $flags );" 4
.el .IP "\f(CW$gi\fR = Geo::IP\->open( \f(CW$database_filename\fR, \f(CW$flags\fR );" 4
.IX Item "$gi = Geo::IP->open( $database_filename, $flags );"
Constructs a new Geo::IP object with the database located at \f(CW$database_filename\fR.
.ie n .IP "$gi = Geo::IP\->open_type( $database_type, $flags );" 4
.el .IP "\f(CW$gi\fR = Geo::IP\->open_type( \f(CW$database_type\fR, \f(CW$flags\fR );" 4
.IX Item "$gi = Geo::IP->open_type( $database_type, $flags );"
Constructs a new Geo::IP object with the \f(CW$database_type\fR database located in the standard
location.  For example
.Sp
.Vb 1
\&  $gi = Geo::IP\->open_type( GEOIP_CITY_EDITION_REV1 , GEOIP_STANDARD );
.Ve
.Sp
opens the database file in the standard location for GeoIP City, typically
\&\fI/usr/local/share/GeoIP/GeoIPCity.dat\fR.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.ie n .IP "$code = $gi\->country_code_by_addr( $ipaddr );" 4
.el .IP "\f(CW$code\fR = \f(CW$gi\fR\->country_code_by_addr( \f(CW$ipaddr\fR );" 4
.IX Item "$code = $gi->country_code_by_addr( $ipaddr );"
Returns the \s-1ISO\s0 3166 country code for an \s-1IP\s0 address.
.ie n .IP "$code = $gi\->country_code_by_name( $hostname );" 4
.el .IP "\f(CW$code\fR = \f(CW$gi\fR\->country_code_by_name( \f(CW$hostname\fR );" 4
.IX Item "$code = $gi->country_code_by_name( $hostname );"
Returns the \s-1ISO\s0 3166 country code for a hostname.
.ie n .IP "$code = $gi\->country_code3_by_addr( $ipaddr );" 4
.el .IP "\f(CW$code\fR = \f(CW$gi\fR\->country_code3_by_addr( \f(CW$ipaddr\fR );" 4
.IX Item "$code = $gi->country_code3_by_addr( $ipaddr );"
Returns the 3 letter country code for an \s-1IP\s0 address.
.ie n .IP "$code = $gi\->country_code3_by_name( $hostname );" 4
.el .IP "\f(CW$code\fR = \f(CW$gi\fR\->country_code3_by_name( \f(CW$hostname\fR );" 4
.IX Item "$code = $gi->country_code3_by_name( $hostname );"
Returns the 3 letter country code for a hostname.
.ie n .IP "$name = $gi\->country_name_by_addr( $ipaddr );" 4
.el .IP "\f(CW$name\fR = \f(CW$gi\fR\->country_name_by_addr( \f(CW$ipaddr\fR );" 4
.IX Item "$name = $gi->country_name_by_addr( $ipaddr );"
Returns the full country name for an \s-1IP\s0 address.
.ie n .IP "$name = $gi\->country_name_by_name( $hostname );" 4
.el .IP "\f(CW$name\fR = \f(CW$gi\fR\->country_name_by_name( \f(CW$hostname\fR );" 4
.IX Item "$name = $gi->country_name_by_name( $hostname );"
Returns the full country name for a hostname.
.ie n .IP "$r = $gi\->record_by_addr( $ipaddr );" 4
.el .IP "\f(CW$r\fR = \f(CW$gi\fR\->record_by_addr( \f(CW$ipaddr\fR );" 4
.IX Item "$r = $gi->record_by_addr( $ipaddr );"
Returns a Geo::IP::Record object containing city location for an \s-1IP\s0 address.
.ie n .IP "$r = $gi\->record_by_name( $hostname );" 4
.el .IP "\f(CW$r\fR = \f(CW$gi\fR\->record_by_name( \f(CW$hostname\fR );" 4
.IX Item "$r = $gi->record_by_name( $hostname );"
Returns a Geo::IP::Record object containing city location for a hostname.
.ie n .IP "$org = $gi\->org_by_addr( $ipaddr );" 4
.el .IP "\f(CW$org\fR = \f(CW$gi\fR\->org_by_addr( \f(CW$ipaddr\fR );" 4
.IX Item "$org = $gi->org_by_addr( $ipaddr );"
Returns the Organization, \s-1ISP\s0 name or Domain Name for an \s-1IP\s0 address.
.ie n .IP "$org = $gi\->org_by_name( $hostname );" 4
.el .IP "\f(CW$org\fR = \f(CW$gi\fR\->org_by_name( \f(CW$hostname\fR );" 4
.IX Item "$org = $gi->org_by_name( $hostname );"
Returns the Organization, \s-1ISP\s0 name or Domain Name for a hostname.
.ie n .IP "$info = $gi\->database_info;" 4
.el .IP "\f(CW$info\fR = \f(CW$gi\fR\->database_info;" 4
.IX Item "$info = $gi->database_info;"
Returns database string, includes version, date, build number and copyright notice.
.ie n .IP "$old_charset = $gi\->set_charset( $charset );" 4
.el .IP "\f(CW$old_charset\fR = \f(CW$gi\fR\->set_charset( \f(CW$charset\fR );" 4
.IX Item "$old_charset = $gi->set_charset( $charset );"
Set the charset for the city name \- defaults to \s-1GEOIP_CHARSET_ISO_8859_1\s0.  To
set \s-1UTF8\s0, pass \s-1GEOIP_CHARSET_UTF8\s0 to set_charset.
For perl >= 5.008 the utf8 flag is honored.
.ie n .IP "$charset = $gi\->charset;" 4
.el .IP "\f(CW$charset\fR = \f(CW$gi\fR\->charset;" 4
.IX Item "$charset = $gi->charset;"
Gets the currently used charset.
.ie n .IP "( $country, $region ) = $gi\->region_by_addr('24.24.24.24');" 4
.el .IP "( \f(CW$country\fR, \f(CW$region\fR ) = \f(CW$gi\fR\->region_by_addr('24.24.24.24');" 4
.IX Item "( $country, $region ) = $gi->region_by_addr('24.24.24.24');"
Returns a list containing country and region. If region and/or country is
unknown, undef is returned. Sure this works only for region databases.
.ie n .IP "( $country, $region ) = $gi\->region_by_name('www.xyz.com');" 4
.el .IP "( \f(CW$country\fR, \f(CW$region\fR ) = \f(CW$gi\fR\->region_by_name('www.xyz.com');" 4
.IX Item "( $country, $region ) = $gi->region_by_name('www.xyz.com');"
Returns a list containing country and region. If region and/or country is
unknown, undef is returned. Sure this works only for region databases.
.ie n .IP "$netmask = $gi\->last_netmask;" 4
.el .IP "\f(CW$netmask\fR = \f(CW$gi\fR\->last_netmask;" 4
.IX Item "$netmask = $gi->last_netmask;"
Gets netmask of network block from last lookup.
.ie n .IP "$gi\->netmask(12);" 4
.el .IP "\f(CW$gi\fR\->netmask(12);" 4
.IX Item "$gi->netmask(12);"
Sets netmask for the last lookup
.ie n .IP "my ( $from, $to ) = $gi\->range_by_ip('24.24.24.24');" 4
.el .IP "my ( \f(CW$from\fR, \f(CW$to\fR ) = \f(CW$gi\fR\->range_by_ip('24.24.24.24');" 4
.IX Item "my ( $from, $to ) = $gi->range_by_ip('24.24.24.24');"
Returns the start and end of the current network block. The method tries to join several continous netblocks.
.SH "MAILING LISTS AND CVS"
.IX Header "MAILING LISTS AND CVS"
Are available from SourceForge, see
http://sourceforge.net/projects/geoip/
.PP
The direct link to the mailing list is
http://lists.sourceforge.net/lists/listinfo/geoip\-perl
.SH "VERSION"
.IX Header "VERSION"
1.37
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Geo::IP::Record
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2009, MaxMind, Inc
.PP
All rights reserved.  This package is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
